### YamlMime:Tutorial
title: 探索 C# 6 - C# 互動式 C# 教學課程
metadata:
  title: 探索 C# 6 - 使用瀏覽器以互動方式嘗試 C# 6 的新功能
  description: 在本教學課程中，您將使用瀏覽器以互動方式探索 C# 6。 您將探索可與 C# 6 搭配使用的新慣用語，讓程式碼更精確且更容易閱讀。
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1dfd9dba60f21cf80e53ac1e9735859cb567797d
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: zh-TW
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88268097"
items:
- durationInMinutes: 1
  content: >
    本教學課程讓您以互動方式探索 C# 6，您將使用瀏覽器來撰寫 C#，並查看編譯和執行程式碼的結果。 它包含一系列課程，修改了先前 C# 實作以使用更新且更精確的 C# 6 功能。 本文的其餘部分將概述每項功能，並提供連結以探索每項功能。
- title: 唯讀 Auto 屬性會啟用唯讀類型
  durationInMinutes: 2
  content: "Auto 屬性語法的下列兩項增強功能可讓您更輕鬆地在更多地方使用 Auto 屬性：唯讀 Auto 屬性和 Auto 屬性初始設定式。 請考慮使用這個小程式：\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n 進入焦點模式，將上述程式碼複製到 C# 互動式視窗。 然後，選取 [ *執行* ] 以查看程式碼的用途。 `AllCaps` 具有修改屬性值及傳回大寫字串的非預期副作用。 `Person` 類別的作者預期 `FirstName` 和 `LastName` 為唯讀字串。 使用 C# 6，您就可以清楚表達該意圖。 從這兩個屬性移除 `private set`，即可建立唯讀 Auto 屬性。 選取 [ *執行* ]，以查看編譯器是否有指向 `FirstName` 和屬性在 `LastName` 不應該是變更時的兩個位置。 您可以將 `AllCaps` 方法變更為下列程式碼來修正此編譯器錯誤：\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n使用這個新語法時，編譯器會確定屬性固定不變。\n"
- title: 初始化 Auto 屬性的支援欄位
  durationInMinutes: 1
  content: "C# 6 中的新語法可讓您對 Auto 屬性使用初始設定式。 這會隨著類別擴充新功能變得越來越重要。 將中間名屬性及接受三個字串之新建構函式新增至您的 `Person` 類別：\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n`MiddleName` 屬性上的指派即為初始設定式。 它會初始化編譯器為中間名所產生的支援欄位。\n"
- title: 運算式主體成員
  durationInMinutes: 2
  content: >
    運算式主體成員為輕量型方法提供輕量型語法。 `Person` 類別有兩個很好的候選。 看一下 `ToString` 的宣告：


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    以下列程式碼取代 `ToString` 的宣告：


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    對 `AllCaps` 方法嘗試相同的動作。 雖然這項改善並不大，但明智使用時即可建立更容易閱讀的程式碼，特別是針對資料傳輸物件 (DTO) 及具有最小行為的其他類型。
- title: 匯入單一類別
  durationInMinutes: 2
  content: "如果您在程式碼中重複使用一個類別的靜態方法，則每次包含類別名稱都會模糊您的程式碼意義。 `Person` 類別目前會匯入 `System` 命名空間，但只會使用 <xref:System.Console?displayProperty=nameWithType>。 修改 `using` 陳述式如下：\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n`static using`語句在較大的程式中變得更有用，這些程式廣泛使用具有許多靜態方法的單一類別，例如 [`string`](xref:System.String) 類別或 <xref:System.Math?displayProperty=nameWithType> 類別。\n"
- title: 更佳的字串格式
  durationInMinutes: 2
  content: "C# 6 包含新的語法，可從字串和可評估的內嵌運算式撰寫字串，以產生其他字串值。 您可以變更 `ToString` 和 `AllCaps` 方法來使用此語法：\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n您可以直接撰寫 C# 運算式，而不是在 `{` 和 `}` 之間放置引數。 您可以在 `Main` 方法中執行相同的動作。 將現有的程式碼取代為下列程式碼：\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n這些運算式中的變數並不限於一個。 讓我們從新的範例開始，並修改以示範您可以搭配字串內插補點使用的其他運算式。 在 `Main` 方法中將下列程式碼貼入互動式視窗：\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n使用 LINQ，因此您必須將下列 using 語句加入至互動式視窗的頂端：\n\n```csharp\nusing System.Linq;\n```\n\n您可以移除區域變數 `average`，並當作內插字串運算式的一部分來計算。 以下列程式碼取代最後兩行：\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n執行上述範例時，您會發現，`Average` 的輸出小數位數超出您想要的位數。 字串內插補點語法支援使用稍早格式化方法時可用的所有格式字串。 您在大括弧內指定了格式字串。 在運算式之後新增 `:` 以格式化︰\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: 快速又簡單的 Null 檢查
  durationInMinutes: 2
  content: "`?.` (Null 條件) 運算子可讓您更輕鬆地撰寫邏輯來將 `null` 值順暢地列入考量，而不需要額外的 `if` 檢查。 若要探索此功能，一開始請將下列程式碼複製到互動式視窗來嘗試執行：\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n當您執行範例時，它會擲回 <xref:System.NullReferenceException>。 將 `.` 成員存取運算子變更為 **null 條件運算子**：\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n這項變更後沒有任何輸出。 這是因為當 `s.Length` 的結果為 `int` 時，`s?.Length` 的結果為 `int?`。 在此範例中，`s?.Length` 是 `null`。 如果左運算元為 `null`，`?.` 會傳回 `null`。 `?.`運算子會針對實值型別和不可為 null 的參考型別，傳回該型別的可為 null 型別。 除了 `?.`，您還可以使用 `?[]` 進行陣列或索引子存取。 在互動式視窗中嘗試下列程式碼：\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n 多個條件運算子可結合成一個運算式。 `null` 左運算元會產生 `null` 結果，讓您輕鬆地避免巢狀 if 子句來存取成員的成員。 例如，請在互動式視窗中嘗試下列程式碼：\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n 使用 **Null 聯合運算子**來提供預設值，即可簡化上述範例：\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Null 條件運算子**可協助您撰寫程式碼來清楚表達您的核心邏輯，同時順暢地測試 `null` 值。\n"
- title: 例外狀況篩選條件
  durationInMinutes: 2
  content: "例外狀況篩選條件可讓您根據一些條件來攔截例外狀況。 通常會用來建立記錄例外狀況，但絕不會處理這些例外狀況的篩選方法。 例外狀況篩選條件是布林運算式，若應該執行 `catch` 子句，則為 `true`；若 `catch` 子句不應該攔截例外狀況，則為 `false`。 在互動式視窗中嘗試下列程式碼：它會將例外狀況類型和訊息記錄到主控台。 它會傳回 `false` ，表示無法處理例外狀況。 在互動式視窗中嘗試下列程式。\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n您應該會看到來自 `LogException` 方法的訊息，後面接著預設例外狀況訊息。 若要試驗，請將 `return false` 陳述式變更為 `return true`，然後再執行一次。 現在，系統會攔截到例外狀況，且程式會完成執行。\n\n除了記錄情節，例外狀況篩選條件在下列情況可能最有用：當例外狀況的屬性會決定要採取的動作時。 例如，您可以查看 <xref:System.AggregateException> 內部以了解包含哪些例外狀況，並根據特定例外狀況採取一些適當的動作。\n"
- title: 使用 nameof
  durationInMinutes: 2
  content: "`nameof` 運算子會傳回任何變數、類型或類型成員的名稱。 在互動式視窗中嘗試下列程式碼，以查看其運作方式：\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n輸出會符合變數或類型的名稱。 即使您提供的是完整類型名稱 (例如 `System.String`)，`nameof` 運算子還是會傳回不完整的名稱。 此功能在需要將參數或屬性名稱轉換成字串時最有用。 範例包括擷取擲回 <xref:System.ArgumentNullException> 或 <xref:System.ArgumentException> 的引數名稱，或是擷取實作 <xref:System.ComponentModel.INotifyPropertyChanged> 時已變更的屬性名稱。 \n"
- title: 新的物件初始化語法
  durationInMinutes: 2
  content: "物件初始設定式語法現在支援初始化*索引子*以及屬性和欄位。 此新增可讓您更容易初始化字典和其他型別。 從某個字典開始。 在互動式視窗中執行下列程式碼：\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n此語法可以設定索引子中的值，能用於在索引子上有可存取 set 存取子的任何型別。\n\n第二個變更可讓您更輕鬆啟用代表序列的型別初始設定式語法。 集合初始設定式可用在實作 <xref:System.Collections.IEnumerable> 並可公開存取 `Add` 方法的任何類別。 `Add` 方法也可以是擴充方法。 \n\n下例顯示此語法的一個案例。 它會建立 `Path` 類別，該類別實作 `IEnumerable<Point3D>`，並有一個方法可新增點來接受三個引數。 `Extensions` 類別會建立額外的 `Add` 方法，從它的三個元件來新增點。 此範例因受環境限制，目前不會以互動方式執行。\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: 您已完成探索 C# 6 的新功能。 現在，請在您的應用程式中自行嘗試。
